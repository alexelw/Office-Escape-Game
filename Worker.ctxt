#BlueJ class context
comment0.target=Worker
comment0.text=\n\ Abstract\ class\ for\ worker\ actors\ in\ the\ game.\n\ \n\ Provides\ core\ functionality\ for\ managing\ speed,\ movement,\ interactions,\n\ and\ applying\ effects\ from\ collectibles.\n\ \n\ @author\ Alex\ Watts\ \n\ @version\ 1.0\n
comment1.params=movement
comment1.target=Worker(IMovement)
comment1.text=\n\ Constructor\ to\ initialize\ a\ worker\ with\ a\ specific\ movement\ strategy.\n\ \n\ @param\ movement\ the\ movement\ strategy\ to\ be\ used\ by\ the\ worker\n\ @throws\ IllegalArgumentException\ if\ the\ movement\ is\ null\n
comment10.params=
comment10.target=void\ animateTalking()
comment10.text=\n\ Animates\ the\ worker's\ talking\ state.\n\ Default\ implementation\ does\ nothing\ but\ can\ be\ overridden\ by\ subclasses.\n
comment2.params=speedChange
comment2.target=void\ updateSpeed(int)
comment2.text=\n\ Updates\ the\ worker's\ speed\ by\ a\ specified\ change.\n\ Ensures\ that\ speed\ cannot\ go\ below\ 1.\n\ \n\ @param\ speedChange\ the\ change\ in\ speed\ (positive\ or\ negative)\n
comment3.params=
comment3.target=int\ getSpeed()
comment3.text=\n\ Returns\ the\ current\ speed\ of\ the\ worker.\n\ \n\ @return\ the\ worker's\ current\ speed\n
comment4.params=speed
comment4.target=void\ setSpeed(int)
comment4.text=\n\ Sets\ the\ worker's\ speed\ to\ a\ specified\ value.\n\ Ensures\ speed\ cannot\ be\ negative.\n\ \n\ @param\ speed\ the\ new\ speed\ to\ set\n
comment5.params=collectible
comment5.target=void\ applyEffectToCollectible(Collectible)
comment5.text=\n\ Applies\ the\ effect\ of\ a\ collectible\ to\ the\ worker\ and\ removes\ the\ collectible\ from\ the\ world.\n\ \n\ @param\ collectible\ the\ collectible\ whose\ effect\ will\ be\ applied\n
comment6.params=worker
comment6.target=void\ interactWith(Worker)
comment6.text=\n\ Abstract\ method\ to\ handle\ interactions\ between\ workers.\n\ This\ must\ be\ implemented\ by\ subclasses.\n\ \n\ @param\ worker\ the\ other\ worker\ to\ interact\ with\n
comment7.params=
comment7.target=void\ move()
comment7.text=\n\ Abstract\ method\ for\ moving\ the\ worker.\n\ Each\ worker\ will\ implement\ its\ own\ movement\ logic.\n
comment8.params=
comment8.target=void\ stopMovement()
comment8.text=\n\ Stops\ the\ worker's\ movement.\n\ This\ can\ be\ overridden\ by\ subclasses\ for\ specific\ stop\ behavior.\n
comment9.params=
comment9.target=void\ resumeMovement()
comment9.text=\n\ Resumes\ the\ worker's\ movement.\n\ This\ can\ be\ overridden\ by\ subclasses\ for\ specific\ resume\ behavior.\n
numComments=11
